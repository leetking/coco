/****************************************************************************************
 *  ----------------------------------------------------------------------------------  *
 *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  | fc_mxcsr|fc_x87_cw|       guard       |         R12        |        R13        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        R14        |        R15        |         RBX        |        RBP        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   16    |   17    |   18    |   19    |    20    |    21   |    22   |    23   |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x40  |   0x44  |  0x48   |  0x50   |                                        |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        RIP        | finish  |         |                                        |  *
 *  ----------------------------------------------------------------------------------  *
 ****************************************************************************************/

/**
 * typedef void* ctx_t;
 * typedef struct {
 *     ctx_t ctx;   // 源ctx, %rdi, %rax
 *     void* data;  // 给此ctx的参数, %rsi, $rdx
 * } transfer_t;
 *
 * ctx_t co_make_ctx(void* sp, size_t size, void* (*fn)(transfer_t));
 * 指定栈并构造一个入口为 fn 的上下文环境
 * @param sp %rdi: 协程的栈，指向高地址
 * @param size %rsi: 栈大小
 * @param fn %rdx: 入口函数，fn接受transfer_t类型参数，表明来自上下文和传入的参数
 * @return ctx %rax: 构造的上下文环境
 */
.text
.global co_make_ctx
.type co_make_ctx,@function
.align 16
co_make_ctx:
    movq    %rdi, %rax          /* %rdi 栈顶 */
    andq    $-16, %rax          /* 栈对齐16字节 ref: https://stackoverflow.com/questions/49391001/why-does-the-x86-64-amd64-system-v-abi-mandate-a-16-byte-stack-alignment */
    leaq    -0x50(%rax), %rax   /* 分配空间存储ctx, 以及finish的地址 */

    /* 意外返回的保护结束程序 */
    leaq    finish(%rip), %rcx
    movq    %rcx, 0x48(%rax)    /* finish */

    movq    %rdx, 0x40(%rax)    /* fn */
    ret

finish:
    /* xorq %rdi, %rdi */
    /* exit with fn return value */
    movl    %eax, %edi  /* 严格来说int是32位，应该使用eax */
    call    _exit@PLT
    /* 预期不会执行到下面hlt */
    hlt

.size co_make_ctx,.-co_make_ctx
/* 标记栈不可执行 */
.section .note.GNU-stack,"",%progbits
