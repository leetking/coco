/****************************************************************************************
 *  ----------------------------------------------------------------------------------  *
 *  |    0    |    1    |    2    |    3    |    4     |    5    |    6    |    7    |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x0   |   0x4   |   0x8   |   0xc   |   0x10   |   0x14  |   0x18  |   0x1c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  | fc_mxcsr|fc_x87_cw|       guard       |         R12        |        R13        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |    8    |    9    |   10    |   11    |    12    |    13   |    14   |    15   |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x20  |   0x24  |   0x28  |  0x2c   |   0x30   |   0x34  |   0x38  |   0x3c  |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        R14        |        R15        |         RBX        |        RBP        |  *
 *  ----------------------------------------------------------------------------------  *
 *  ----------------------------------------------------------------------------------  *
 *  |   16    |   17    |   18    |   19    |    20    |    21   |    22   |    23   |  *
 *  ----------------------------------------------------------------------------------  *
 *  |   0x40  |   0x44  |                                                            |  *
 *  ----------------------------------------------------------------------------------  *
 *  |        RIP        |                                                            |  *
 *  ----------------------------------------------------------------------------------  *
 ****************************************************************************************/

/**
 * typedef void* ctx_t;
 * typedef struct {
 *     ctx_t ctx;   // 源ctx, %rdi, %rax
 *     void* data;  // 给此ctx的参数, %rsi, $rdx
 * } transfer_t;
 *
 * transfer_t co_jump_ctx(ctx_t to, void* data)
 * 跳转流程到to上下文中执行，并且传递参数data给to
 * @param to %rdi:
 * @param data %rsi: 传递给to的执行函数的参数
 * @return:
 *     ctx %rax: 跳转来自src，并且保存了它的上下文
 *     data %rdx: src上下文传递给当前上下问的数据
 */
.text
.global co_jump_ctx
.type co_jump_ctx,@function
.align 16
co_jump_ctx:
    leaq    -0x40(%rsp), %rsp
    movq    %rsp, %rax
    movq    %r12, 0x10(%rax)
    movq    %r13, 0x18(%rax)
    movq    %r14, 0x20(%rax)
    movq    %r15, 0x28(%rax)
    movq    %rbx, 0x30(%rax)
    movq    %rbp, 0x38(%rax)
    /* %rip 在 call co_jump_ctx 时就设置到 0x40(%rsp) */

    /* 恢复 to ctx */
    movq    0x10(%rdi), %r12
    movq    0x18(%rdi), %r13
    movq    0x20(%rdi), %r14
    movq    0x28(%rdi), %r15
    movq    0x30(%rdi), %rbx
    movq    0x38(%rdi), %rbp
    leaq    0x40(%rdi), %rsp
    /* 留下 %rip 不恢复，通过ret恢复 */
    /* 传递参数给fn，也构造返回值
     * fn 第一次被调用的时候，表现为函数调用，构造入参 (%rdi, %rsi)
     * fn 后续被恢复时，从 co_jump_ctx 返回值获得参数 (%rax, %rdx)
     */
    movq    %rax, %rdi      /* src ctx */
    movq    %rsi, %rdx      /* 传入的 data */
    /* 跳转执行（也恢复了 %rip） */
    ret

.size co_jump_ctx,.-co_jump_ctx
/* 标记栈不可执行 */
.section .note.GNU-stack,"",%progbits
